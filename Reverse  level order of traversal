// Iterative Queue based Java program
// to do level order traversal
// of Binary Tree

/* importing the inbuilt java classes
required for the program */
import java.util.LinkedList;
import java.util.Queue;
import java.util.*;

/* Class to represent Tree node */
public class BinaryTree {
static class Node {
	int data;
	Node left, right;

	public Node(int item)
	{
		data = item;
		left = null;
		right = null;
	}
}

/* Class to print Level Order Traversal */


	Node root;



void  printLevelOrder()
	{
	    Stack<Integer> st = new Stack<>();
		Queue<Node> queue = new LinkedList<Node>();
		queue.add(root);
		
		while (!queue.isEmpty()) {
		  
			Node tempNode = queue.poll();
			st.add(tempNode.data);
		   

			/*Enqueue left child */
			if (tempNode.left != null) {
				queue.add(tempNode.left);
			}

			/*Enqueue right child */
			if (tempNode.right != null) {
				queue.add(tempNode.right);
			}
		}
		while(!st.isEmpty())
		{
		    System.out.print(st.pop());
		}
		}
	

	public static void main(String args[])
	{
		/* creating a binary tree and entering
		the nodes */
		BinaryTree tree_level = new BinaryTree();
		tree_level.root = new Node(1);
		tree_level.root.left = new Node(2);
		tree_level.root.right = new Node(3);
		tree_level.root.left.left = new Node(4);
		tree_level.root.left.right = new Node(5);

		System.out.println("Level order traversal of binary tree is - ");
							tree_level.printLevelOrder();
						
	}
}
